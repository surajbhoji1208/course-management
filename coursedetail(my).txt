course-details.component.html (user)

<div class="container">
  <h2 class="mb-4">Popular Courses</h2>

  <div class="row">
    <div *ngFor="let course of courses" class="col-md-3">
      <div class="card course-card">
        <img [src]="course.image" class="card-img-top" alt="Course Image">
        <div class="card-body">
          <h5 class="card-title">{{ course.name }}</h5>
          <p class="card-text">{{ course.course_desc }}</p>
          <div class="d-flex justify-content-between align-items-center">
            <span class="price">₹{{ course.price }}</span>
            <span class="old-price">₹{{ course.old_price }}</span>
          </div>
          <div class="ratings">
            ⭐ {{ course.rating }} ({{ course.reviews }})
          </div>
          <a [routerLink]="['/course', course.id]" class="btn btn-primary">View Details</a>
        </div>
      </div>
    </div>
  </div>
</div>
-------------------------------------------------------------------------------------
/* Container styles */
.courses-container {
  padding: 20px;
  max-width: 1200px;
  margin: auto;
}

.section-title {
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 20px;
}

/* Courses Wrapper */
.courses-wrapper {
  display: flex;
  gap: 15px;
  overflow-x: auto;  /* Horizontal scroll */
  padding-bottom: 10px;
}

/* Course Card */
.course-card {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  width: 270px; /* Fixed width */
  min-width: 270px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s ease;
  display: flex;
  flex-direction: column;
}

.course-card:hover {
  transform: scale(1.05);
}

/* Course Image */
.course-image {
  width: 100%;
  height: 160px;
  object-fit: cover;
}

/* Course Details */
.course-details {
  padding: 12px;
  display: flex;
  flex-direction: column;
}

.course-title {
  font-size: 16px;
  font-weight: bold;
}

.course-desc {
  font-size: 14px;
  color: #666;
  margin: 5px 0;
}

/* Price and Ratings */
.course-info {
  display: flex;
  align-items: center;
  gap: 8px;
}

.course-price {
  font-size: 18px;
  font-weight: bold;
  color: #28a745;
}

.old-price {
  text-decoration: line-through;
  color: #888;
  font-size: 14px;
}

.ratings {
  font-size: 14px;
  color: #ff9800;
  margin: 5px 0;
}

/* Tags */
.course-tags {
  display: flex;
  gap: 5px;
}

.premium, .bestseller {
  font-size: 12px;
  padding: 5px 8px;
  border-radius: 5px;
  color: white;
}

.premium {
  background-color: #6a0dad;
}

.bestseller {
  background-color: #1abc9c;
}
--------------------------------------------------------------------------------------------
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CourseService } from '../../services/course.service';

@Component({
  selector: 'app-course-details',
  standalone: false,
  templateUrl: './course-details.component.html',
  styleUrl: './course-details.component.css'
})
export class CourseDetailsComponent implements OnInit {
  courses: any[] = [];
  course: any;

  constructor(private courseService: CourseService) {}

  ngOnInit(): void {
    this.loadCourses();
  }

  loadCourses(): void {
    this.courseService.getCourses().subscribe((data: any) => {
      this.courses = data;
    }, (error: any) => {
      console.error("Error fetching courses:", error);
    });
  }

  }
--------------------------------------------------------------------------------------
admin add-course html
<div class="admin-container">
  <h2>Create Course</h2>
  <form (ngSubmit)="createCourse()">
    <label>Course Name</label>
    <input type="text" [(ngModel)]="courseName" name="courseName" required>

    <label>Course Description</label>
    <input type="text" [(ngModel)]="courseDesc" name="courseDesc" required>

    <label>Video URL</label>
    <input type="text" [(ngModel)]="videoUrl" name="videoUrl" required>

    <label>Course Image URL</label>
    <input type="text" [(ngModel)]="courseImage" name="courseImage" required>

    <label>Price</label>
    <input type="number" [(ngModel)]="coursePrice" name="coursePrice" required>

    <label>Old Price</label>
    <input type="number" [(ngModel)]="courseOldPrice" name="courseOldPrice">

    <h3>Chapters</h3>
    <div *ngFor="let chapter of chapters; let i = index">
      <input type="text" [(ngModel)]="chapter.title" name="chapter{{i}}" required>
      <button type="button" (click)="removeChapter(i)">Remove</button> 
    </div>
    <button type="button" (click)="addChapter()">Add Chapter</button>

    <button type="submit">Create Course</button>
  </form>

  <!-- Admin Course Management -->
  <h2>Manage Courses</h2>
  <div *ngIf="courses.length > 0; else noCourses">
    <ul>
      <li *ngFor="let course of courses">
        <div class="course-card">
          <img [src]="course.image" alt="Course Image" class="course-img">
          <div class="course-content">
            <h3>{{ course.name }}</h3>
            <p>{{ course.course_desc }}</p>
            <a [href]="course.video" target="_blank">Watch Video</a>

            <div class="course-info">
              <span class="price">₹{{ course.price }}</span>
              <span class="old-price">₹{{ course.old_price }}</span>
              <span class="rating">⭐ {{ course.rating }} ({{ course.reviews }})</span>
            </div>

            <h4>Chapters:</h4>
            <ul>
              <li *ngFor="let chapter of course.chapters">
                ✅ {{ chapter.title }} 
              </li>
            </ul>

            <!-- Edit and Delete Buttons -->
            <div class="actions">
              <button (click)="editCourse(course)">Edit</button>
              <button (click)="deleteCourse(course.id)">Delete</button>
            </div>
          </div>
        </div>
      </li>
    </ul>
  </div>

  <ng-template #noCourses>
    <p>No courses available.</p>
  </ng-template>
</div>
-------------------------------------------------------------------------------------
.admin-container {
  max-width: 800px;
  margin: auto;
  padding: 20px;
  background: #fff;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  border-radius: 10px;
}

h2 {
  text-align: center;
}

form {
  display: flex;
  flex-direction: column;
}

label {
  font-weight: bold;
  margin-top: 10px;
}

input {
  padding: 8px;
  margin-top: 5px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  margin-top: 10px;
  padding: 8px;
  border: none;
  cursor: pointer;
  background: #007bff;
  color: white;
  font-weight: bold;
  border-radius: 5px;
}

button:hover {
  background: #0056b3;
}

.course-card {
  display: flex;
  background: #f8f8f8;
  padding: 15px;
  margin: 10px 0;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.course-img {
  width: 120px;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
}

.course-content {
  padding-left: 10px;
}

.course-info {
  display: flex;
  gap: 10px;
}

.price {
  font-size: 18px;
  color: #28a745;
  font-weight: bold;
}

.old-price {
  text-decoration: line-through;
  color: #888;
  font-size: 14px;
}

.rating {
  font-size: 14px;
  color: #ff9800;
}

.actions {
  margin-top: 10px;
}

.actions button {
  background: #dc3545;
}

.actions button:hover {
  background: #b02a37;
}
------------------------------------------------
db.json
{
  "signup": [
    {
      "id": "1",
      "name": "user123",
      "email": "user123@gmail.com",
      "password": "user123",
      "address": "Pune",
      "role": "user"
    },
    {
      "id": "2",
      "name": "admin",
      "email": "admin@gmail.com",
      "password": "admin123",
      "address": "Pune",
      "role": "admin"
    },
    {
      "id": "b9cb",
      "fullname": "",
      "email": "",
      "password": "",
      "mobile": ""
    },
    {
      "id": "a901",
      "fullname": "",
      "email": "",
      "password": "",
      "mobile": ""
    },
    {
      "id": "b4fd",
      "fullname": "",
      "email": "",
      "password": "",
      "mobile": ""
    },
    {
      "id": "88a2",
      "fullname": "",
      "email": "",
      "password": "",
      "mobile": ""
    }
  ],
  "login_users": [
    {
      "id": "1",
      "email": "user123@gmail.com",
      "password": "user123"
    }
  ],
  "login_admins": [
    {
      "id": "2",
      "email": "admin@gmail.com",
      "password": "admin123"
    }
  ],
  "courses": [
    {
      "id": "97a8",
      "name": "java",
      "course_desc": "java is full stack course",
      "image": "assets/images/angular-course.jpg",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "java Introducation",
          "completed": false
        }
      ]
    },
    {
      "id": "e219",
      "name": "Python",
      "course_desc": "Python is full stack developer",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "Python Introduction",
          "completed": false
        }
      ]
    },
    {
      "id": "0e4d",
      "name": "html",
      "course_desc": "html is a frontend language",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "html",
          "completed": false
        }
      ]
    },
    {
      "id": "9ecd",
      "name": "AI ML",
      "course_desc": "AI is future of aritificaial intelligence",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "AI Aritifical Intelligence",
          "completed": false
        }
      ]
    },
    {
      "id": "936a",
      "name": "java",
      "course_desc": "java is full stack course",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "java",
          "completed": false
        }
      ]
    },
    {
      "id": "da06",
      "name": "Database",
      "course_desc": "database is backend releted things",
      "video": "https://youtu.be/gC1k4D2EpK4?si=P47hxRjm0UnI0mWp",
      "progress": 0,
      "price": 499,
      "old_price": 2699,
      "rating": 4.5,
      "reviews": 44394,
      "bestSeller": true,
      "chapters": [
        {
          "id": 1,
          "title": "sql",
          "completed": false
        },
        {
          "id": 2,
          "title": "sql liteweigth",
          "completed": false
        }
      ]
    }
  ],
  "users": []
}
----------------------------------------------------------------------------------------------
admin java-course.html
<div class="container mt-5">
    <h2 class="text-center">Admin Panel - Manage Chapters</h2>
    
    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th>ID</th>
                <th>Course ID</th>
                <th>Chapter Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr *ngFor="let chapter of chapters">
                <td>{{ chapter.id }}</td>
                <td>{{ chapter.course_id }}</td>
                <td><input [(ngModel)]="chapter.name" /></td>
                <td><input [(ngModel)]="chapter.desc" /></td>
                <td>
                    <button class="btn btn-success btn-sm" (click)="updateChapter(chapter)">Save</button>
                    <button class="btn btn-danger btn-sm" (click)="deleteChapter(chapter.id)">Delete</button>
                </td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary mt-3" (click)="addChapter()">Add New Chapter</button>
</div>
---------------------------------------------------------------------------------------------------
admin java-course.ts
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-java-course',
  standalone: false,
  templateUrl: './java-course.component.html',
  styleUrl: './java-course.component.css'
})
export class JavaCourseComponent implements OnInit{
  chapters: any[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchChapters();
  }

  fetchChapters() {
    this.http.get<any[]>('http://localhost:3000/chapters').subscribe(data => {
      this.chapters = data;
    });
  }

  updateChapter(chapter: any) {
    this.http.put(`http://localhost:3000/chapters/${chapter.id}`, chapter)
      .subscribe(() => alert('Chapter Updated!'));
  }

  deleteChapter(id: number) {
    this.http.delete(`http://localhost:3000/chapters/${id}`)
      .subscribe(() => {
        this.chapters = this.chapters.filter(ch => ch.id !== id);
      });
  }

  addChapter() {
    const newChapter = {
      id: Math.floor(Math.random() * 1000),
      course_id: '',
      name: '',
      desc: '',
      watched: false,
      video: '',
      quiz: { id: 0, question: '', options: [], correct_answer: '' }
    };

    this.http.post('http://localhost:3000/chapters', newChapter)
      .subscribe(() => {
        this.chapters.push(newChapter);
      });
  } 
}
-------------------------------------------------------------------------------------------------
user mycourse.html
<!-- Sidebar -->
<div class="sidebar">
    <h5 class="text-center">Course Videos</h5>
    <ul class="list-group list-group-flush">
        <li *ngFor="let chapter of chapters" class="list-group-item bg-transparent">
            <a href="#" class="text-light" (click)="selectChapter(chapter)">
                {{ chapter.id }}. {{ chapter.name }}
            </a>
            <span class="badge float-end" [ngClass]="{'bg-success': chapter.watched, 'bg-warning': !chapter.watched}">
                {{ chapter.watched ? 'Watched' : 'New' }}
            </span>
        </li>
    </ul>
</div>

<!-- Main Content -->
<div class="main-content">
    <div class="container">
        <h3 class="mb-4">Now Playing: {{ selectedChapter?.name }}</h3>
        <div class="ratio ratio-16x9">
            <iframe *ngIf="selectedChapter" [src]="selectedChapter.video" frameborder="0" allowfullscreen></iframe>
        </div>

        <!-- Video Description -->
        <div class="video-description mt-4">
            <h5>Lesson Description</h5>
            <p>{{ selectedChapter?.desc }}</p>
            <hr>
            <h6>Course Progress</h6>
            <div class="progress">
                <div class="progress-bar" role="progressbar" 
                     [style.width]="progress + '%'" aria-valuenow="25" 
                     aria-valuemin="0" aria-valuemax="100">
                    {{ progress }}%
                </div>
            </div>
        </div>
    </div>
</div>
-----------------------------------------------------------------------------------
mycourse.c.ts user
import { HttpClient } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-mycourse',
  standalone: false,
  templateUrl: './mycourse.component.html',
  styleUrl: './mycourse.component.css'
})
export class MycourseComponent implements OnInit{
  chapters: any[] = [];
  selectedChapter: any = null;
  progress: number = 0;

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchChapters();
  }

  fetchChapters() {
    this.http.get<any[]>('http://localhost:3000/chapters').subscribe(data => {
      this.chapters = data;
      this.calculateProgress();
    });
  }

  selectChapter(chapter: any) {
    this.selectedChapter = chapter;
    this.markAsWatched(chapter);
  }

  markAsWatched(chapter: any) {
    chapter.watched = true;
    this.http.put(`http://localhost:3000/chapters/${chapter.id}`, chapter)
      .subscribe(() => this.calculateProgress());
  }

  calculateProgress() {
    const watchedCount = this.chapters.filter(ch => ch.watched).length;
    this.progress = (watchedCount / this.chapters.length) * 100;
  }
}